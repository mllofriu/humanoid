/* Auto-generated by genmsg_cpp for file /home/ludo/workspace/rosbuild_ws/humanoid_stack/humanoid_msgs/humanoid_nav_msgs/srv/ClipFootstep.srv */
#ifndef HUMANOID_NAV_MSGS_SERVICE_CLIPFOOTSTEP_H
#define HUMANOID_NAV_MSGS_SERVICE_CLIPFOOTSTEP_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "humanoid_nav_msgs/StepTarget.h"


#include "humanoid_nav_msgs/StepTarget.h"

namespace humanoid_nav_msgs
{
template <class ContainerAllocator>
struct ClipFootstepRequest_ {
  typedef ClipFootstepRequest_<ContainerAllocator> Type;

  ClipFootstepRequest_()
  : step()
  {
  }

  ClipFootstepRequest_(const ContainerAllocator& _alloc)
  : step(_alloc)
  {
  }

  typedef  ::humanoid_nav_msgs::StepTarget_<ContainerAllocator>  _step_type;
   ::humanoid_nav_msgs::StepTarget_<ContainerAllocator>  step;


  typedef boost::shared_ptr< ::humanoid_nav_msgs::ClipFootstepRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::humanoid_nav_msgs::ClipFootstepRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ClipFootstepRequest
typedef  ::humanoid_nav_msgs::ClipFootstepRequest_<std::allocator<void> > ClipFootstepRequest;

typedef boost::shared_ptr< ::humanoid_nav_msgs::ClipFootstepRequest> ClipFootstepRequestPtr;
typedef boost::shared_ptr< ::humanoid_nav_msgs::ClipFootstepRequest const> ClipFootstepRequestConstPtr;


template <class ContainerAllocator>
struct ClipFootstepResponse_ {
  typedef ClipFootstepResponse_<ContainerAllocator> Type;

  ClipFootstepResponse_()
  : step()
  {
  }

  ClipFootstepResponse_(const ContainerAllocator& _alloc)
  : step(_alloc)
  {
  }

  typedef  ::humanoid_nav_msgs::StepTarget_<ContainerAllocator>  _step_type;
   ::humanoid_nav_msgs::StepTarget_<ContainerAllocator>  step;


  typedef boost::shared_ptr< ::humanoid_nav_msgs::ClipFootstepResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::humanoid_nav_msgs::ClipFootstepResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ClipFootstepResponse
typedef  ::humanoid_nav_msgs::ClipFootstepResponse_<std::allocator<void> > ClipFootstepResponse;

typedef boost::shared_ptr< ::humanoid_nav_msgs::ClipFootstepResponse> ClipFootstepResponsePtr;
typedef boost::shared_ptr< ::humanoid_nav_msgs::ClipFootstepResponse const> ClipFootstepResponseConstPtr;

struct ClipFootstep
{

typedef ClipFootstepRequest Request;
typedef ClipFootstepResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct ClipFootstep
} // namespace humanoid_nav_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::humanoid_nav_msgs::ClipFootstepRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::humanoid_nav_msgs::ClipFootstepRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::humanoid_nav_msgs::ClipFootstepRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f22cfce442b381849d82602383b052c7";
  }

  static const char* value(const  ::humanoid_nav_msgs::ClipFootstepRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf22cfce442b38184ULL;
  static const uint64_t static_value2 = 0x9d82602383b052c7ULL;
};

template<class ContainerAllocator>
struct DataType< ::humanoid_nav_msgs::ClipFootstepRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "humanoid_nav_msgs/ClipFootstepRequest";
  }

  static const char* value(const  ::humanoid_nav_msgs::ClipFootstepRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::humanoid_nav_msgs::ClipFootstepRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "StepTarget step\n\
\n\
================================================================================\n\
MSG: humanoid_nav_msgs/StepTarget\n\
# Target for a single stepping motion of a humanoid's leg\n\
\n\
geometry_msgs/Pose2D pose   # step pose as relative offset to last leg\n\
uint8 leg                   # which leg to use (left/right, see below)\n\
\n\
uint8 right=0               # right leg constant\n\
uint8 left=1                # left leg constant\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose2D\n\
# This expresses a position and orientation on a 2D manifold.\n\
\n\
float64 x\n\
float64 y\n\
float64 theta\n\
";
  }

  static const char* value(const  ::humanoid_nav_msgs::ClipFootstepRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::humanoid_nav_msgs::ClipFootstepRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::humanoid_nav_msgs::ClipFootstepResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::humanoid_nav_msgs::ClipFootstepResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::humanoid_nav_msgs::ClipFootstepResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f22cfce442b381849d82602383b052c7";
  }

  static const char* value(const  ::humanoid_nav_msgs::ClipFootstepResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf22cfce442b38184ULL;
  static const uint64_t static_value2 = 0x9d82602383b052c7ULL;
};

template<class ContainerAllocator>
struct DataType< ::humanoid_nav_msgs::ClipFootstepResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "humanoid_nav_msgs/ClipFootstepResponse";
  }

  static const char* value(const  ::humanoid_nav_msgs::ClipFootstepResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::humanoid_nav_msgs::ClipFootstepResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "StepTarget step\n\
\n\
\n\
================================================================================\n\
MSG: humanoid_nav_msgs/StepTarget\n\
# Target for a single stepping motion of a humanoid's leg\n\
\n\
geometry_msgs/Pose2D pose   # step pose as relative offset to last leg\n\
uint8 leg                   # which leg to use (left/right, see below)\n\
\n\
uint8 right=0               # right leg constant\n\
uint8 left=1                # left leg constant\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose2D\n\
# This expresses a position and orientation on a 2D manifold.\n\
\n\
float64 x\n\
float64 y\n\
float64 theta\n\
";
  }

  static const char* value(const  ::humanoid_nav_msgs::ClipFootstepResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::humanoid_nav_msgs::ClipFootstepResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::humanoid_nav_msgs::ClipFootstepRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.step);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ClipFootstepRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::humanoid_nav_msgs::ClipFootstepResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.step);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ClipFootstepResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<humanoid_nav_msgs::ClipFootstep> {
  static const char* value() 
  {
    return "394ac576028f40af6569704f845b86a1";
  }

  static const char* value(const humanoid_nav_msgs::ClipFootstep&) { return value(); } 
};

template<>
struct DataType<humanoid_nav_msgs::ClipFootstep> {
  static const char* value() 
  {
    return "humanoid_nav_msgs/ClipFootstep";
  }

  static const char* value(const humanoid_nav_msgs::ClipFootstep&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<humanoid_nav_msgs::ClipFootstepRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "394ac576028f40af6569704f845b86a1";
  }

  static const char* value(const humanoid_nav_msgs::ClipFootstepRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<humanoid_nav_msgs::ClipFootstepRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "humanoid_nav_msgs/ClipFootstep";
  }

  static const char* value(const humanoid_nav_msgs::ClipFootstepRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<humanoid_nav_msgs::ClipFootstepResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "394ac576028f40af6569704f845b86a1";
  }

  static const char* value(const humanoid_nav_msgs::ClipFootstepResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<humanoid_nav_msgs::ClipFootstepResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "humanoid_nav_msgs/ClipFootstep";
  }

  static const char* value(const humanoid_nav_msgs::ClipFootstepResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // HUMANOID_NAV_MSGS_SERVICE_CLIPFOOTSTEP_H

